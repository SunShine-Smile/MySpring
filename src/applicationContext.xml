<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<bean id="helloWorld" class="com.jason.spring.beans.HelloWorld">
		<property name="name" value="Spring"></property>
	</bean>

	<bean id="car" class="com.jason.spring.beans.Car">
		<constructor-arg value="ShangHai" index="0"></constructor-arg>
		<constructor-arg value="BenChi" index="1"></constructor-arg>
		<constructor-arg value="300" type="int"></constructor-arg>
	</bean>
	<!-- 使用构造器注入可以指定参数的位置和参数的类型，以区分重载的构造器 -->
	<bean id="car1" class="com.jason.spring.beans.Car">
		<!-- 如果字面值包含特殊字符，可以使用 <![CDATA[]]> 包裹进来 -->
		<constructor-arg type="java.lang.String">
			<value><![CDATA[<ShangHai>]]></value>
		</constructor-arg>
		<constructor-arg value="BaoMa" type="java.lang.String"></constructor-arg>
		<constructor-arg value="100.00" type="double"></constructor-arg>
	</bean>

	<bean id="person" class="com.jason.spring.beans.Person">
		<property name="name" value="Jason"></property>
		<property name="age" value="30"></property>
		<!-- <property name="car" ref="car1"></property> -->
		
		<!-- 或者这么写 -->
		<!-- <property name="car">
			<ref bean="car1"/>
		</property> -->
		
		<property name="car">
			<bean class="com.jason.spring.beans.Car">
				<constructor-arg value="Ford"></constructor-arg>
				<constructor-arg value="Changan"></constructor-arg>
				<constructor-arg value="50" type="double"></constructor-arg>
			</bean>
		</property>
	</bean>
	
	<bean id="person2" class="com.jason.spring.beans.Person">
		<constructor-arg value="Jason"></constructor-arg>
		<constructor-arg value="30"></constructor-arg>
		<!-- <constructor-arg ref="car"></constructor-arg> -->
		<!-- 赋值null -->
		<!-- <constructor-arg><null/></constructor-arg> -->
		
		<constructor-arg ref="car"></constructor-arg>
		<!-- 位级联属性赋值。注意：属性需要先初始化后才能为级联属性赋值，否则有异常，和struts2不同，-->
		<property name="car.price" value="123456"></property>
	</bean>
	
	<bean id="person3" class="com.jason.spring.beans.collection.Person">
		<property name="name" value="Mike"></property>
		<property name="age" value="27"></property>
		<property name="cars">
			<!-- 使用List节点为List类型的属性赋值 -->
			<list>
				<ref bean="car"></ref>
				<ref bean="car1"></ref>
				<bean class="com.jason.spring.beans.Car">
					<constructor-arg value="Yiqi" index="0"></constructor-arg>
					<constructor-arg value="DaZhong" index="1"></constructor-arg>
					<!-- 此处会根据<value>标签中的值类型来自动匹配属性 -->
					<constructor-arg>
						<value>300</value>
					</constructor-arg>
					<!-- <constructor-arg value="300" type="int"></constructor-arg> -->
				</bean>
			</list>
		</property>
	</bean>
	<!-- 配置Map属性 -->
	<bean id="newPerson" class="com.jason.spring.beans.collection.NewPerson">
		<property name="name" value="Rose"></property>
		<property name="age">
			<value><![CDATA[<芳龄28~>]]></value>
		</property>
		<property name="cars">
			<!-- 使用map节点及map的entry子节点配置Map类型的成员变量 -->
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car1"></entry>
			</map>
		</property>
	</bean>

	<!-- 配置Properties属性值 -->
	<bean id="dataSource" class="com.jason.spring.beans.collection.DataSource">
		<property name="properties">
		<!-- 使用props和prop子节点来为properties属性赋值 -->
			<props>
				<prop key="user">root</prop>
				<prop key="password">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql:///test</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	<!-- 配置单例的集合bean，以供多个bean进行使用，需要导入util命名空间 -->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car1"/>
	</util:list>

	<bean id="person5" class="com.jason.spring.beans.collection.Person">
		<property name="name" value="Jack"></property>
		<property name="age" value="27"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- 通过P命名空间为bean属性赋值，需要先导入P命名空间，相对于传统的配置方式更加简洁一些，在Spring2.5以后引入该命名空间 -->
	<bean id="person6" class="com.jason.spring.beans.collection.Person" p:age="31" p:name="Tom" p:cars-ref="cars"></bean>

</beans>
